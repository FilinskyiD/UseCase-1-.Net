Update by Create a function that accepts numbers as an attribute and can limit the number of records.  

The functionality should accept a number and retrieve first n records (e.g., providing number `15` I should receive 15 first records from API).  
ChatGPT
You can add a function that limits the number of records returned by the API by taking the first n elements from the list of countries. You can then integrate this functionality into your existing API route.

Here's how you can update your Program.cs file to include this feature:

csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net.Http.Json;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"));
}

app.UseHttpsRedirection();

app.MapGet("/api/countries", async (string? searchString, int? populationInMillions, string? sortDirection, int? limit) =>
{
    using var httpClient = new HttpClient();
    var response = await httpClient.GetAsync("https://restcountries.com/v3.1/all");
    
    if (!response.IsSuccessStatusCode)
    {
        return Results.BadRequest("Could not retrieve countries");
    }

    var countries = await response.Content.ReadFromJsonAsync<List<Country>>();
    
    if (!string.IsNullOrEmpty(searchString))
    {
        countries = FilterCountriesByName(countries, searchString);
    }

    if (populationInMillions.HasValue)
    {
        countries = FilterCountriesByPopulation(countries, populationInMillions.Value);
    }

    if (!string.IsNullOrEmpty(sortDirection))
    {
        countries = SortCountriesByName(countries, sortDirection);
    }

    if (limit.HasValue)
    {
        countries = LimitNumberOfRecords(countries, limit.Value);
    }

    return Results.Ok(countries);
}).Produces<List<Country>>(); // Adding type information for Swagger

public class Country
{
    public string Name { get; set; }
    public string CommonName { get; set; }
    public long Population { get; set; }
}

public static List<Country> FilterCountriesByName(List<Country> countries, string searchString)
{
    return countries.Where(country => 
        country.Name != null && 
        country.Name.IndexOf(searchString, System.StringComparison.OrdinalIgnoreCase) >= 0 ||
        country.CommonName != null && 
        country.CommonName.IndexOf(searchString, System.StringComparison.OrdinalIgnoreCase) >= 0
    ).ToList();
}

public static List<Country> FilterCountriesByPopulation(List<Country> countries, int populationInMillions)
{
    return countries.Where(country => country.Population < populationInMillions * 1_000_000).ToList();
}

public static List<Country> SortCountriesByName(List<Country> countries, string sortDirection)
{
    if (sortDirection.ToLower() == "ascend")
    {
        return countries.OrderBy(country => country.Name).ToList();
    }
    else if (sortDirection.ToLower() == "descend")
    {
        return countries.OrderByDescending(country => country.Name).ToList();
    }
    else
    {
        return countries;
    }
}

public static List<Country> LimitNumberOfRecords(List<Country> countries, int limit)
{
    return countries.Take(limit).ToList();
}

app.Run();
I've added a function called LimitNumberOfRecords that takes the list of countries and a number (limit) to limit the number of records returned. This function uses LINQ's Take method to get the first n records from the list of countries.

The lambda function for the /api/countries route now accepts an additional optional integer parameter named limit. If this parameter is provided, the function will limit the number of records returned using the LimitNumberOfRecords function.