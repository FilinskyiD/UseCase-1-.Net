Update by 
Create a function that accepts a string as a parameter and can filter by country `name/common`.  

The filter should search for countries names that contains string from attributes (e.g. providing `st` as attribute I could find `Estonia`, providing `Sp` I could find `Spain`) 

search should be case insensitive (e.g., providing `sT` should find `Estonia`) 
ChatGPT

2 / 2

Certainly! You can create a simple function to filter the list of countries by their name/common attribute. This function would take the list of countries and a search string as parameters and return a filtered list. You can then use this function within your Minimal API route.

Here's the updated Program.cs file:

csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net.Http.Json;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"));
}

app.UseHttpsRedirection();

app.MapGet("/api/countries", async (string? str1, int? num1, string? str2, int? num2) =>
{
    using var httpClient = new HttpClient();
    var response = await httpClient.GetAsync("https://restcountries.com/v3.1/all");
    
    if (!response.IsSuccessStatusCode)
    {
        return Results.BadRequest("Could not retrieve countries");
    }

    var countries = await response.Content.ReadFromJsonAsync<List<Country>>();
    
    if (!string.IsNullOrEmpty(str1))
    {
        countries = FilterCountriesByName(countries, str1);
    }

    // Here, you can use num1, str2, num2 to further filter or manipulate the countries list
    // ...

    return Results.Ok(countries);
}).Produces<List<Country>>(); // Adding type information for Swagger

public class Country
{
    public Name Name { get; set; }
}

public class Name
{
    public string Common { get; set; }
}

public static List<Country> FilterCountriesByName(List<Country> countries, string searchString)
{
    return countries.Where(country => 
        country.Name.Common != null && 
        country.Name.Common.IndexOf(searchString, System.StringComparison.OrdinalIgnoreCase) >= 0
    ).ToList();
}

app.Run();
Here, I added a FilterCountriesByName function that uses LINQ to filter the list of countries by their name/common attribute. It uses IndexOf with StringComparison.OrdinalIgnoreCase for case-insensitive matching.

I also adjusted the country classes to better match the structure of the JSON returned by the REST Countries API.

You can call this function within the /api/countries route, using str1 as the search string for filtering countries by name.




User
remove class Name instead use string props Name, CommonName in Country class
ChatGPT
Certainly! You can modify the Country class to have Name and CommonName properties directly. Then you can adjust the filtering function to use these new properties.

Here's the updated Program.cs file:

csharp
Copy code
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net.Http.Json;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddSwaggerGen();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1"));
}

app.UseHttpsRedirection();

app.MapGet("/api/countries", async (string? str1, int? num1, string? str2, int? num2) =>
{
    using var httpClient = new HttpClient();
    var response = await httpClient.GetAsync("https://restcountries.com/v3.1/all");
    
    if (!response.IsSuccessStatusCode)
    {
        return Results.BadRequest("Could not retrieve countries");
    }

    var countries = await response.Content.ReadFromJsonAsync<List<Country>>();
    
    if (!string.IsNullOrEmpty(str1))
    {
        countries = FilterCountriesByName(countries, str1);
    }

    // Here, you can use num1, str2, num2 to further filter or manipulate the countries list
    // ...

    return Results.Ok(countries);
}).Produces<List<Country>>(); // Adding type information for Swagger

public class Country
{
    public string Name { get; set; }
    public string CommonName { get; set; }
}

public static List<Country> FilterCountriesByName(List<Country> countries, string searchString)
{
    return countries.Where(country => 
        country.Name != null && 
        country.Name.IndexOf(searchString, System.StringComparison.OrdinalIgnoreCase) >= 0 ||
        country.CommonName != null && 
        country.CommonName.IndexOf(searchString, System.StringComparison.OrdinalIgnoreCase) >= 0
    ).ToList();
}

app.Run();
I've removed the Name class and added Name and CommonName properties to the Country class directly. Then, I updated the FilterCountriesByName function to filter based on these properties. This function now checks both the Name and CommonName properties of each country for a case-insensitive match with the search string.